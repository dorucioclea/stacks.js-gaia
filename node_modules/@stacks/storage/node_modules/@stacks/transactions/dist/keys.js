"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.publicKeyToAddress = exports.privateKeyToString = exports.getPublicKey = exports.parseRecoverableSignature = exports.getSignatureRecoveryParam = exports.signWithKey = exports.makeRandomPrivKey = exports.createStacksPrivateKey = exports.deserializePublicKey = exports.compressPublicKey = exports.pubKeyfromPrivKey = exports.isPrivateKeyCompressed = exports.serializePublicKey = exports.publicKeyToString = exports.isCompressed = exports.publicKeyFromBuffer = exports.publicKeyFromSignature = exports.createStacksPublicKey = exports.getAddressFromPublicKey = exports.getAddressFromPrivateKey = void 0;
const common_1 = require("@stacks/common");
const constants_1 = require("./constants");
const utils_1 = require("./utils");
const secp256k1_1 = require("@noble/secp256k1");
const sha256_1 = require("@noble/hashes/sha256");
const hmac_1 = require("@noble/hashes/hmac");
const common_2 = require("./common");
const c32check_1 = require("c32check");
secp256k1_1.utils.hmacSha256Sync = (key, ...msgs) => {
    const h = hmac_1.hmac.create(sha256_1.sha256, key);
    msgs.forEach(msg => h.update(msg));
    return h.digest();
};
function getAddressFromPrivateKey(privateKey, transactionVersion = constants_1.TransactionVersion.Mainnet) {
    const pubKey = pubKeyfromPrivKey(privateKey);
    return getAddressFromPublicKey(pubKey.data, transactionVersion);
}
exports.getAddressFromPrivateKey = getAddressFromPrivateKey;
function getAddressFromPublicKey(publicKey, transactionVersion = constants_1.TransactionVersion.Mainnet) {
    publicKey = typeof publicKey === 'string' ? publicKey : publicKey.toString('hex');
    const addrVer = common_2.addressHashModeToVersion(constants_1.AddressHashMode.SerializeP2PKH, transactionVersion);
    const addr = common_2.addressFromVersionHash(addrVer, utils_1.hashP2PKH(common_1.Buffer.from(publicKey, 'hex')));
    const addrString = common_2.addressToString(addr);
    return addrString;
}
exports.getAddressFromPublicKey = getAddressFromPublicKey;
function createStacksPublicKey(key) {
    return {
        type: constants_1.StacksMessageType.PublicKey,
        data: common_1.Buffer.from(key, 'hex'),
    };
}
exports.createStacksPublicKey = createStacksPublicKey;
function publicKeyFromSignature(message, messageSignature, pubKeyEncoding = constants_1.PubKeyEncoding.Compressed) {
    const parsedSignature = parseRecoverableSignature(messageSignature.data);
    const signature = new secp256k1_1.Signature(common_1.hexToBigInt(parsedSignature.r), common_1.hexToBigInt(parsedSignature.s));
    const point = secp256k1_1.Point.fromSignature(message, signature, parsedSignature.recoveryParam);
    const compressed = pubKeyEncoding === constants_1.PubKeyEncoding.Compressed;
    return point.toHex(compressed);
}
exports.publicKeyFromSignature = publicKeyFromSignature;
function publicKeyFromBuffer(data) {
    return { type: constants_1.StacksMessageType.PublicKey, data };
}
exports.publicKeyFromBuffer = publicKeyFromBuffer;
function isCompressed(key) {
    return !key.data.toString('hex').startsWith('04');
}
exports.isCompressed = isCompressed;
function publicKeyToString(key) {
    return key.data.toString('hex');
}
exports.publicKeyToString = publicKeyToString;
function serializePublicKey(key) {
    const bufferArray = new utils_1.BufferArray();
    bufferArray.push(key.data);
    return bufferArray.concatBuffer();
}
exports.serializePublicKey = serializePublicKey;
function isPrivateKeyCompressed(key) {
    const data = typeof key === 'string' ? common_1.Buffer.from(key, 'hex') : key;
    let compressed = false;
    if (data.length === 33) {
        if (data[data.length - 1] !== 1) {
            throw new Error('Improperly formatted private-key. 33 byte length usually ' +
                'indicates compressed key, but last byte must be == 0x01');
        }
        compressed = true;
    }
    else if (data.length === 32) {
        compressed = false;
    }
    else {
        throw new Error(`Improperly formatted private-key hex string: length should be 32 or 33 bytes, provided with length ${data.length}`);
    }
    return compressed;
}
exports.isPrivateKeyCompressed = isPrivateKeyCompressed;
function pubKeyfromPrivKey(privateKey) {
    const privKey = createStacksPrivateKey(privateKey);
    const isCompressed = isPrivateKeyCompressed(privateKey);
    const pubKey = secp256k1_1.getPublicKey(privKey.data.slice(0, 32), isCompressed || privKey.compressed);
    return createStacksPublicKey(secp256k1_1.utils.bytesToHex(pubKey));
}
exports.pubKeyfromPrivKey = pubKeyfromPrivKey;
function compressPublicKey(publicKey) {
    const hex = typeof publicKey === 'string' ? publicKey : secp256k1_1.utils.bytesToHex(publicKey);
    const compressed = secp256k1_1.Point.fromHex(hex).toHex(true);
    return createStacksPublicKey(compressed);
}
exports.compressPublicKey = compressPublicKey;
function deserializePublicKey(bufferReader) {
    const fieldId = bufferReader.readUInt8();
    const keyLength = fieldId !== 4 ? constants_1.COMPRESSED_PUBKEY_LENGTH_BYTES : constants_1.UNCOMPRESSED_PUBKEY_LENGTH_BYTES;
    return publicKeyFromBuffer(common_1.Buffer.concat([common_1.Buffer.from([fieldId]), bufferReader.readBuffer(keyLength)]));
}
exports.deserializePublicKey = deserializePublicKey;
function createStacksPrivateKey(key) {
    const data = typeof key === 'string' ? common_1.Buffer.from(key, 'hex') : key;
    const compressed = isPrivateKeyCompressed(key);
    return { data, compressed };
}
exports.createStacksPrivateKey = createStacksPrivateKey;
function makeRandomPrivKey() {
    return createStacksPrivateKey(secp256k1_1.utils.bytesToHex(secp256k1_1.utils.randomPrivateKey()));
}
exports.makeRandomPrivKey = makeRandomPrivKey;
function signWithKey(privateKey, input) {
    const [rawSignature, recoveryParam] = secp256k1_1.signSync(input, privateKey.data.slice(0, 32), {
        canonical: true,
        recovered: true,
    });
    const signature = secp256k1_1.Signature.fromHex(rawSignature);
    const coordinateValueBytes = 32;
    const r = utils_1.leftPadHexToLength(signature.r.toString(16), coordinateValueBytes * 2);
    const s = utils_1.leftPadHexToLength(signature.s.toString(16), coordinateValueBytes * 2);
    if (recoveryParam === undefined || recoveryParam === null) {
        throw new Error('"signature.recoveryParam" is not set');
    }
    const recoveryParamHex = utils_1.intToHexString(recoveryParam, 1);
    const recoverableSignatureString = recoveryParamHex + r + s;
    return common_2.createMessageSignature(recoverableSignatureString);
}
exports.signWithKey = signWithKey;
function getSignatureRecoveryParam(signature) {
    const coordinateValueBytes = 32;
    if (signature.length < coordinateValueBytes * 2 * 2 + 1) {
        throw new Error('Invalid signature');
    }
    const recoveryParamHex = signature.substr(0, 2);
    return utils_1.hexStringToInt(recoveryParamHex);
}
exports.getSignatureRecoveryParam = getSignatureRecoveryParam;
function parseRecoverableSignature(signature) {
    const coordinateValueBytes = 32;
    if (signature.length < coordinateValueBytes * 2 * 2 + 1) {
        throw new Error('Invalid signature');
    }
    const recoveryParamHex = signature.substr(0, 2);
    const r = signature.substr(2, coordinateValueBytes * 2);
    const s = signature.substr(2 + coordinateValueBytes * 2, coordinateValueBytes * 2);
    return {
        recoveryParam: utils_1.hexStringToInt(recoveryParamHex),
        r,
        s,
    };
}
exports.parseRecoverableSignature = parseRecoverableSignature;
function getPublicKey(privateKey) {
    return pubKeyfromPrivKey(privateKey.data);
}
exports.getPublicKey = getPublicKey;
function privateKeyToString(privateKey) {
    return privateKey.data.toString('hex');
}
exports.privateKeyToString = privateKeyToString;
function publicKeyToAddress(version, publicKey) {
    return c32check_1.c32address(version, utils_1.hash160(publicKey.data).toString('hex'));
}
exports.publicKeyToAddress = publicKeyToAddress;
//# sourceMappingURL=keys.js.map