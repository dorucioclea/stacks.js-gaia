import { TransactionVersion, ChainID } from '@stacks/common';
export declare const HIRO_MAINNET_DEFAULT = "https://stacks-node-api.mainnet.stacks.co";
export declare const HIRO_REGTEST_DEFAULT = "https://stacks-node-api.regtest.stacks.co";
export declare const HIRO_TESTNET_DEFAULT = "https://stacks-node-api.testnet.stacks.co";
export declare const HIRO_MOCKNET_DEFAULT = "http://localhost:3999";
export interface NetworkConfig {
    url: string;
}
export interface StacksNetwork {
    version: TransactionVersion;
    chainId: ChainID;
    bnsLookupUrl: string;
    broadcastEndpoint: string;
    transferFeeEstimateEndpoint: string;
    accountEndpoint: string;
    contractAbiEndpoint: string;
    readOnlyFunctionCallEndpoint: string;
    isMainnet(): boolean;
    getBroadcastApiUrl: () => string;
    getTransferFeeEstimateApiUrl: () => string;
    getAccountApiUrl: (address: string) => string;
    getAbiApiUrl: (address: string, contract: string) => string;
    getReadOnlyFunctionCallApiUrl: (contractAddress: string, contractName: string, functionName: string) => string;
    getInfoUrl: () => string;
    getBlockTimeInfoUrl: () => string;
    getPoxInfoUrl: () => string;
    getRewardsUrl: (address: string, options?: any) => string;
    getRewardHoldersUrl: (address: string, options?: any) => string;
    getRewardsTotalUrl: (address: string) => string;
    getStackerInfoUrl: (contractAddress: string, contractName: string) => string;
    getNameInfo: (fullyQualifiedName: string) => any;
}
export declare class StacksMainnet implements StacksNetwork {
    version: TransactionVersion;
    chainId: ChainID;
    bnsLookupUrl: string;
    broadcastEndpoint: string;
    transferFeeEstimateEndpoint: string;
    accountEndpoint: string;
    contractAbiEndpoint: string;
    readOnlyFunctionCallEndpoint: string;
    private _coreApiUrl;
    get coreApiUrl(): string;
    set coreApiUrl(_url: string);
    constructor(networkUrl?: NetworkConfig);
    isMainnet: () => boolean;
    getBroadcastApiUrl: () => string;
    getTransferFeeEstimateApiUrl: () => string;
    getAccountApiUrl: (address: string) => string;
    getAbiApiUrl: (address: string, contract: string) => string;
    getReadOnlyFunctionCallApiUrl: (contractAddress: string, contractName: string, functionName: string) => string;
    getInfoUrl: () => string;
    getBlockTimeInfoUrl: () => string;
    getPoxInfoUrl: () => string;
    getRewardsUrl: (address: string, options?: any) => string;
    getRewardsTotalUrl: (address: string) => string;
    getRewardHoldersUrl: (address: string, options?: any) => string;
    getStackerInfoUrl: (contractAddress: string, contractName: string) => string;
    getNameInfo(fullyQualifiedName: string): Promise<any>;
}
export declare class StacksTestnet extends StacksMainnet implements StacksNetwork {
    version: TransactionVersion;
    chainId: ChainID;
    constructor(networkUrl?: NetworkConfig);
}
export declare class StacksMocknet extends StacksMainnet implements StacksNetwork {
    version: TransactionVersion;
    chainId: ChainID;
    constructor(networkUrl?: NetworkConfig);
}
export declare class StacksRegtest extends StacksMainnet implements StacksNetwork {
    version: TransactionVersion;
    chainId: ChainID;
    constructor(networkUrl?: NetworkConfig);
}
