"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchAppManifest = exports.getAuthRequestFromURL = void 0;
const queryString = __importStar(require("query-string"));
const jsontokens_1 = require("jsontokens");
const common_1 = require("@stacks/common");
function getAuthRequestFromURL() {
    const location = common_1.getGlobalObject('location', {
        throwIfUnavailable: true,
        usageDesc: 'getAuthRequestFromURL',
    });
    if (location === null || location === void 0 ? void 0 : location.search) {
        const queryDict = queryString.parse(location === null || location === void 0 ? void 0 : location.search);
        if (queryDict.authRequest) {
            return queryDict.authRequest.split(`${common_1.BLOCKSTACK_HANDLER}:`).join('');
        }
        else {
            return null;
        }
    }
    else {
        return null;
    }
}
exports.getAuthRequestFromURL = getAuthRequestFromURL;
async function fetchAppManifest(authRequest) {
    if (!authRequest) {
        throw new Error('Invalid auth request');
    }
    const payload = jsontokens_1.decodeToken(authRequest).payload;
    if (typeof payload === 'string') {
        throw new Error('Unexpected token payload type of string');
    }
    const manifestURI = payload.manifest_uri;
    try {
        const response = await common_1.fetchPrivate(manifestURI);
        const responseText = await response.text();
        const responseJSON = JSON.parse(responseText);
        return Object.assign(Object.assign({}, responseJSON), { manifestURI });
    }
    catch (error) {
        console.log(error);
        throw new Error('Could not fetch manifest.json');
    }
}
exports.fetchAppManifest = fetchAppManifest;
//# sourceMappingURL=provider.js.map